// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id                   String                  @id @default(uuid())
  fullName             String
  email                String                  @unique   
  phone                String
  address              String                  @db.Text
  clerkId              String                  @unique
  subscriptions        Subscription[]
  payments             Payment[]
  bookings             Booking[]
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
}

model Subscription{
  id                      String                @id @default(uuid())
  subscriptionType        String
  stripeSubscriptionId    String                @unique
  stripeCustomerId        String                
  status                  String                @default("active")
  buyDate                 DateTime                   
  serviceStartTime        DateTime
  serviceEndTime          DateTime
  servicesLeft            Int
  userId                  String
  user                    User                   @relation(fields: [userId],references: [id])
  payments                Payment[]
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
}


model Payment{
  id                      String                @id @default(uuid())
  invoiceId               String                @unique
  invoiceLink             String?
  isCancelPayment         Boolean               @default(false)
  subscriptionId          String
  subscription            Subscription          @relation(fields: [subscriptionId],references: [id])
  userId                  String
  user                    User                  @relation(fields: [userId], references: [id])
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
}

model Progress{
  id                      String                @id @default(uuid())
  clerkId                 String                @unique
  currentStep             Int                   @default(1)
  subscriptionType        String
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
} 

model Booking{
  id                      String                @id @default(uuid())
  calcomId                String                @unique
  userId                  String
  completed               Boolean               @default(false)
  user                    User                  @relation(fields: [userId], references: [id])
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
}

model Admin{
  id                      String                @id @default(uuid())
  name                    String
  email                   String                @unique
  createdAt               DateTime              @default(now())
}
